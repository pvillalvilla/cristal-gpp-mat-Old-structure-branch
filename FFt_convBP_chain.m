%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% --------------------------------------------------------
% Created by isardSAT 
% --------------------------------------------------------
% Performs the Convnetional DIrect Backprojection Processing using the 2D grid 
% (vertical grid corresponds to the different range samples in the range window)
%
% ---------------------------------------------------------
% Objective: Fully focused time domain processing from L1A to L1B
%
% Calling: 
% INPUTs:
% filesBulk:  Structure of the input files including L0 and potentially L1A
% cnf:        Configuration parameters structure
% chd:        Characterization parameters structure
% cst:        Constant parameters structure
%
% OUTPUTs:
%
%
% COMMENTS:
% Current version the L0 from ARESYS is used directly, and the window
% delays of the pulses are computed within this processor
% ----------------------------------------------------------
% Author:    Eduard Makhoul  / isardSAT
%            Albert Garcia / isardSAT
% 
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [filesBulk] = FFt_convBP_chain (filesBulk, chd, cnf, cst, options)
%% INIT VARIABLES

N_bursts            = get_num_record(filesBulk.filename_L0,'nb');
[L1A]               = create_L1A_struct(cnf, chd);
[L1A_buffer]        = create_L1A_struct(cnf, chd);


%% READ THE L0 FROM ARESYS 
for i_burst = 1:N_bursts
    [L1A,filesBulk]  = read_adapt_L0_record(filesBulk,L1A,i_burst,N_bursts, cnf, chd, cst);
    L1A_buffer(i_burst) = L1A;
end
disp(strcat('Processing: ',filesBulk.filename_L0))

%% DATATION & WINDOW DELAY & PRI & T0 PER PULSE 
[time_pulse,win_delay_pulse,pri_pulse,T0_pulse,Process_ID_pulse,...
    L1A_buffer] = ...
    datation_win_delay_pulse(L1A_buffer, cnf, chd, cst);



%% OSV & ATTITUDE SELECTION PER PULSE (MEASURED SIGNAL)
[x_sar_sat_pulse, y_sar_sat_pulse, z_sar_sat_pulse,...
 x_vel_sat_sar_pulse,  y_vel_sat_sar_pulse,  z_vel_sat_sar_pulse,...
 lat_sar_sat_pulse, lon_sar_sat_pulse,...
 alt_sar_sat_pulse,alt_rate_sar_sat_pulse,...
 roll_sar_pulse, pitch_sar_pulse, yaw_sar_pulse] = ...
    osv_attitude_pulse(L1A_buffer, time_pulse, cnf, chd, cst);


%% WAVEFORMS RE-ORGANIZATION
% Concatenate all the waveforms of the pulses from the different bursts
%%% On-board reversion for RMC assumed to be performed in L1A
N_total_pulses = length(time_pulse);
N_samples_rg   = length([L1A_buffer(1).wfm_cal_gain_corrected(1,:)]);
wfm_cal_gain_corrected = zeros(N_total_pulses,N_samples_rg);
for i_burst = 1:N_bursts
    wfm_cal_gain_corrected((i_burst-1)*chd.N_pulses_burst+1:(i_burst-1)*chd.N_pulses_burst+chd.N_pulses_burst,:)=...
        L1A_buffer(i_burst).wfm_cal_gain_corrected;
end



%% RANGE COMPRESSION OF INPUT WAVEFORMS
clear fs;
N_samples_rg = length(wfm_cal_gain_corrected(1,:));

fs      = mean(1./T0_pulse);
f_rg    = ((1:1:N_samples_rg)*fs/N_samples_rg-fs/2d0);
if cnf.window_rg
    f_centroid = 0.0;
    w_rg = window_computation(cnf.flag_range_win_type,...
        cnf.range_BW_to_process,f_rg,f_centroid,fs,...
        'win_param',cnf.flag_range_win_param,...
        'normalize',cnf.flag_range_win_normalize,...
        'normalize_type',cnf.flag_range_win_normalize_type);
else
    w_rg = zeros(1, N_samples_rg) + 1;
end

% ------------  Perform the range compression (&zero-padding) ---------------------
[wfm_RC] = RC_processing (wfm_cal_gain_corrected,w_rg,cnf.zp_fact_range);
s = size(wfm_RC);
N_samples_rg   = s(2);
N_total_pulses = s(1);



%% COMPUTATION OF THE DELAY MATRIX (FOR EACH PULSE AND RANGE SAMPLE)
delay_matrix = (ones(N_total_pulses,1)*(1:1:chd.N_samples_sar*cnf.zp_fact_range)).*...
    (T0_pulse.'/cnf.zp_fact_range*ones(1,chd.N_samples_sar*cnf.zp_fact_range));
delay_matrix = (delay_matrix-(delay_matrix(:,(cnf.FFt.range_reference_sample_cnf-1)*cnf.zp_fact_range+1)*ones(1,chd.N_samples_sar*cnf.zp_fact_range))+...
    (win_delay_pulse.'*ones(1,chd.N_samples_sar*cnf.zp_fact_range)));




%% GRID (SURFACE) COMPUTATION
[x_surf, y_surf, z_surf,...
        lat_surf, lon_surf, alt_surf, win_delay_surf,...
        time_surf,...
        x_vel_sat_surf,y_vel_sat_surf,z_vel_sat_surf,...
        x_sat_surf,y_sat_surf,z_sat_surf,...
        alt_rate_sat_surf,alt_sat_surf,...
        pitch_sat_surf,roll_sat_surf,yaw_sat_surf,...  
        T0_surf,pri_surf,...
        TRP_surf_idx]=...
        focusing_grid_computation(time_pulse,...
        alt_rate_sar_sat_pulse, x_vel_sat_sar_pulse, y_vel_sat_sar_pulse, z_vel_sat_sar_pulse,...
       roll_sar_pulse, pitch_sar_pulse, yaw_sar_pulse,...
       x_sar_sat_pulse, y_sar_sat_pulse, z_sar_sat_pulse,...
       lat_sar_sat_pulse,lon_sar_sat_pulse,alt_sar_sat_pulse,...
       win_delay_pulse,pri_pulse,T0_pulse,...
       cnf,chd,cst,'rg_bins',N_samples_rg,'rg_bin_ref_wd',cnf.FFt.range_reference_sample_cnf);


%Number of surfaces along-track
N_surfaces = length(x_surf(:,1));
disp(strcat('Total surfaces',num2str(N_surfaces)));

%% CONVENTIONAL BACKPROJECTION

% Global to local variable definition for parpool operation
c_cst_chd                           = cst.c;
pi_cst_chd                          = cst.pi;
flat_coeff_cst_chd                  = cst.flat_coeff;
semi_major_axis_cst_chd             = cst.semi_major_axis;
wv_length_ku_chd                    = chd.wv_length;
bw                                  = chd.bw;
Tp                                  = chd.pulse_length;
antenna_beamwidth_along_track_ku    = chd.antenna_beamwidth_along_track;
antenna_beamwidth_across_track_ku   = chd.antenna_beamwidth_across_track;
antenna_pattern_impact_flag         = cnf.FFt.antenna_pattern_impact_flag;
integration_time                    = cnf.FFt.T_integration;

%matlab version for paralelization issues
version_matlab = version;

%output complex waveform
wfm_AC = zeros(N_surfaces,N_samples_rg);
ProcessID = zeros(1,N_surfaces);


%% SWAPPING THE DIFFERENT LOCATIONS ON GROUND ALONG THE TRACK

if cnf.FFt.num_pools~=1
    if str2double(version_matlab(end-5:end-2)) > 2013
        parpool(cnf.FFt.num_pools);
    else
        matlabpool('open',cnf.FFt.num_pools);
    end
    
    parfor i_surf = 1: N_surfaces
        disp(strcat('Surf #:',num2str(i_surf)));
        [wfm_AC(i_surf,:),ProcessID(i_surf)] = conventional_BP ...
            (wfm_RC,...
            delay_matrix,...
            win_delay_pulse,...
            x_sar_sat_pulse, y_sar_sat_pulse, z_sar_sat_pulse,...
            lat_sar_sat_pulse, lon_sar_sat_pulse, alt_sar_sat_pulse,...
            pitch_sar_pulse, roll_sar_pulse, yaw_sar_pulse,...
            x_vel_sat_sar_pulse, y_vel_sat_sar_pulse, z_vel_sat_sar_pulse,...
            time_pulse,...
            x_surf(i_surf,:), y_surf(i_surf,:), z_surf(i_surf,:),...
            time_surf(i_surf),...
            antenna_pattern_impact_flag,...
            cnf.FFt.interpolation_method_backprojection_flag,...
            c_cst_chd, pi_cst_chd, flat_coeff_cst_chd, semi_major_axis_cst_chd,...
            wv_length_ku_chd, bw, Tp,...
            antenna_beamwidth_along_track_ku, antenna_beamwidth_across_track_ku,...
            integration_time,'ProcessID_pulse',Process_ID_pulse);
        
    end %end different surfaces
    
    %close pools
    if str2double(version_matlab(end-5:end-2))>2013
        poolobj = gcp('nocreate');
        delete(poolobj);
    else
        matlabpool('close');
    end
else
    for i_surf = 1 : N_surfaces
        disp(strcat('Surf #:',num2str(i_surf)));
        [wfm_AC(i_surf,:),ProcessID(i_surf)] = conventional_BP ...
            (wfm_RC,...
            delay_matrix,...
            win_delay_pulse,...
            x_sar_sat_pulse, y_sar_sat_pulse, z_sar_sat_pulse,...
            lat_sar_sat_pulse, lon_sar_sat_pulse, alt_sar_sat_pulse,...
            pitch_sar_pulse, roll_sar_pulse, yaw_sar_pulse,...
            x_vel_sat_sar_pulse, y_vel_sat_sar_pulse, z_vel_sat_sar_pulse,...
            time_pulse,...
            x_surf(i_surf,:), y_surf(i_surf,:), z_surf(i_surf,:),...
            time_surf(i_surf),...
            antenna_pattern_impact_flag,...
            cnf.FFt.interpolation_method_backprojection_flag,...
            c_cst_chd, pi_cst_chd, flat_coeff_cst_chd, semi_major_axis_cst_chd,...
            wv_length_ku_chd, bw, Tp,...
            antenna_beamwidth_along_track_ku, antenna_beamwidth_across_track_ku,...
            integration_time,'ProcessID_pulse',Process_ID_pulse);
        
    end %end different surfaces
end

%% MULTILOOKING (INCOHERENT AVERAGING)
%incoherent averaging of the FF waveforms to reduce resolution up to a
%given configuration parameter
if ~cnf.trp_flag
    [pow_ML_FF,~,lat_surf_ML,lon_surf_ML,win_delay_surf_ML,...
        time_surf_ML,...
        x_vel_sat_surf_ML,y_vel_sat_surf_ML,z_vel_sat_surf_ML,...
        alt_rate_sat_surf_ML,alt_sat_surf_ML,...
        pitch_sat_surf_ML,roll_sat_surf_ML,yaw_sat_surf_ML,...
        T0_surf_ML,pri_surf_ML,N_looks]...
        ...
        = multilooking_FF ...
        (wfm_AC,...
        lat_surf, lon_surf, win_delay_surf, time_surf,...
        x_vel_sat_surf, y_vel_sat_surf, z_vel_sat_surf,...
        alt_rate_sat_surf, alt_sat_surf, ...
        pitch_sat_surf, roll_sat_surf, yaw_sat_surf,...
        T0_surf, pri_surf,...
        cnf.FFt.out_spatial_res,...
        cnf.zp_fact_range,...
        cst.semi_major_axis,cst.semi_minor_axis,cst.c,cst.pi,...
        ProcessID,chd.i_sample_start,cnf.RMC_mask_margin);
end

%% SAVING RESULTS IN .mat
L0_date_find = strfind(filesBulk.filename_L0,'_201');
Band=strsplit(filesBulk.filename_L0,'PIC_SIRS___');
Band = char(Band(2)); Band=Band(1:2);
filesBulk.filename_L1B_FFt = strcat(filesBulk.outputPath,'PICE_1B_VHRt_',Band,'_',...
    filesBulk.filename_L0((L0_date_find(1)+1):(L0_date_find(1)+30)),...
    '_isd');
filesBulk.filename_L1B_FFt = strcat(filesBulk.filename_L1B_FFt,'_',cnf.file_ext_name);
if cnf.writting_flag(4)
    save(strcat(filesBulk.filename_L1B_FFt,'_CONVBP.mat'),...
        'wfm_AC',...
        'lat_surf', 'lon_surf', 'win_delay_surf',...
        'time_surf',...
        'x_vel_sat_surf','y_vel_sat_surf','z_vel_sat_surf',...
        'alt_rate_sat_surf','alt_sat_surf',...
        'pitch_sat_surf','roll_sat_surf','yaw_sat_surf',...
        'T0_surf','pri_surf','-v7.3');
    if ~cnf.trp_flag
        save(strcat(filesBulk.filename_L1B_FFt,'_ML_CONVBP','.mat'),...
            'pow_ML_FF',...
            'N_looks',...
            'lat_surf_ML', 'lon_surf_ML', 'win_delay_surf_ML',...
            'time_surf_ML',...
            'x_vel_sat_surf_ML','y_vel_sat_surf_ML','z_vel_sat_surf_ML',...
            'alt_rate_sat_surf_ML','alt_sat_surf_ML',...
            'pitch_sat_surf_ML','roll_sat_surf_ML','yaw_sat_surf_ML',...
            'T0_surf_ML','pri_surf_ML','-v7.3');
    end
    
end
   


end